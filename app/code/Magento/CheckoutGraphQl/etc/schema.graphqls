type Mutation {
    setShippingAddressesOnCart(input: SetShippingAddressesOnCartInput): SetShippingAddressesOnCartOutput @resolver(class: "\\Magento\\CheckoutGraphQl\\Model\\Resolver\\SetShippingAddressesOnCart")
    setBillingAddressOnCart(input: SetBillingAddressOnCartInput): SetBillingAddressOnCartOutput @resolver(class: "\\Magento\\CheckoutGraphQl\\Model\\Resolver\\SetBillingAddressOnCart")
    setShippingMethodsOnCart(input: SetShippingMethodsOnCartInput): SetShippingMethodsOnCartOutput @resolver(class: "\\Magento\\CheckoutGraphQl\\Model\\Resolver\\SetShippingMethodsOnCart")
    setPaymentMethodOnCart(input: SetPaymentMethodOnCartInput): SetPaymentMethodOnCartOutput @resolver(class: "Magento\\CheckoutGraphQl\\Model\\Resolver\\SetPaymentMethodOnCart")
    setGuestEmailOnCart(input: SetGuestEmailOnCartInput): SetGuestEmailOnCartOutput @resolver(class: "Magento\\CheckoutGraphQl\\Model\\Resolver\\SetGuestEmailOnCart")
    placeOrder(input: PlaceOrderInput): PlaceOrderOutput @resolver(class: "\\Magento\\CheckoutGraphQl\\Model\\Resolver\\PlaceOrder")
}

input SetShippingAddressesOnCartInput {
    cart_id: String!
    shipping_addresses: [ShippingAddressInput!]!
}

input ShippingAddressInput {
    customer_address_id: Int # If provided then will be used address from address book
    address: CartAddressInput
}

input SetBillingAddressOnCartInput {
    cart_id: String!
    billing_address: BillingAddressInput!
}

input BillingAddressInput {
    customer_address_id: Int
    address: CartAddressInput
    use_for_shipping: Boolean
}

input CartAddressInput {
    firstname: String!
    lastname: String!
    company: String
    street: [String!]!
    city: String!
    region: String
    postcode: String
    country_code: String!
    telephone: String!
    save_in_address_book: Boolean!
}

input SetShippingMethodsOnCartInput {
    cart_id: String!
    shipping_methods: [ShippingMethodInput!]!
}

input ShippingMethodInput {
    carrier_code: String!
    method_code: String!
}

input SetPaymentMethodOnCartInput {
    cart_id: String!
    payment_method: PaymentMethodInput!
}

input PaymentMethodInput {
    code: String! @doc(description:"Payment method code")
    purchase_order_number: String @doc(description:"Purchase order number")
}

input SetGuestEmailOnCartInput {
    cart_id: String!
    email: String!
}

input PlaceOrderInput {
    cart_id: String!
}

type Cart {
    shipping_addresses: [ShippingCartAddress]! @resolver(class: "\\Magento\\CheckoutGraphQl\\Model\\Resolver\\ShippingAddresses")
    billing_address: BillingCartAddress! @resolver(class: "\\Magento\\CheckoutGraphQl\\Model\\Resolver\\BillingAddress")
    available_payment_methods: [AvailablePaymentMethod]  @resolver(class: "Magento\\CheckoutGraphQl\\Model\\Resolver\\AvailablePaymentMethods") @doc(description: "Available payment methods")
    selected_payment_method: SelectedPaymentMethod @resolver(class: "\\Magento\\CheckoutGraphQl\\Model\\Resolver\\SelectedPaymentMethod")
}

interface CartAddressInterface @typeResolver(class: "\\Magento\\CheckoutGraphQl\\Model\\Resolver\\CartAddressTypeResolver") {
    firstname: String
    lastname: String
    company: String
    street: [String]
    city: String
    region: CartAddressRegion
    postcode: String
    country: CartAddressCountry
    telephone: String
    customer_notes: String
}

type CartAddressRegion {
    code: String
    label: String
}

type CartAddressCountry {
    code: String
    label: String
}

type ShippingCartAddress implements CartAddressInterface {
    available_shipping_methods: [AvailableShippingMethod] @resolver(class: "\\Magento\\CheckoutGraphQl\\Model\\Resolver\\ShippingAddress\\AvailableShippingMethods")
    selected_shipping_method: SelectedShippingMethod @resolver(class: "\\Magento\\CheckoutGraphQl\\Model\\Resolver\\ShippingAddress\\SelectedShippingMethod")
    items_weight: Float
    cart_items: [CartItemQuantity]
}

type BillingCartAddress implements CartAddressInterface {
}

type SelectedShippingMethod {
    carrier_code: String
    method_code: String
    carrier_title: String
    method_title: String
    amount: Money
    base_amount: Money
}

type AvailableShippingMethod {
    carrier_code: String!
    carrier_title: String!
    method_code: String @doc(description: "Could be null if method is not available")
    method_title: String @doc(description: "Could be null if method is not available")
    error_message: String
    amount: Money!
    base_amount: Money @doc(description: "Could be null if method is not available")
    price_excl_tax: Money!
    price_incl_tax: Money!
    available: Boolean!
}

type AvailablePaymentMethod {
    code: String! @doc(description: "The payment method code")
    title: String! @doc(description: "The payment method title.")
}

type SelectedPaymentMethod {
    code: String! @doc(description: "The payment method code")
    title: String! @doc(description: "The payment method title.")
    purchase_order_number: String @doc(description: "The purchase order number.")
}

type Order {
    order_id: String
}

type SetShippingAddressesOnCartOutput {
    cart: Cart!
}

type SetBillingAddressOnCartOutput {
    cart: Cart!
}

type SetShippingMethodsOnCartOutput {
    cart: Cart!
}

type SetPaymentMethodOnCartOutput {
    cart: Cart!
}

type SetGuestEmailOnCartOutput {
    cart: Cart!
}

type PlaceOrderOutput {
    order: Order!
}
