# Copyright Â© Magento, Inc. All rights reserved.
# See COPYING.txt for license details.

type Query {
    cart(cart_id: String!): Cart @resolver (class: "\\Magento\\QuoteGraphQl\\Model\\Resolver\\Cart") @doc(description:"Returns information about shopping cart") @cache(cacheable: false)
}

type Mutation {
    createEmptyCart(input: createEmptyCartInput): String @resolver(class: "\\Magento\\QuoteGraphQl\\Model\\Resolver\\CreateEmptyCart") @doc(description:"Creates an empty shopping cart for a guest or logged in user")
    addSimpleProductsToCart(input: AddSimpleProductsToCartInput): AddSimpleProductsToCartOutput @resolver(class: "Magento\\QuoteGraphQl\\Model\\Resolver\\AddSimpleProductsToCart")
    addVirtualProductsToCart(input: AddVirtualProductsToCartInput): AddVirtualProductsToCartOutput @resolver(class: "Magento\\QuoteGraphQl\\Model\\Resolver\\AddSimpleProductsToCart")
    updateCartItems(input: UpdateCartItemsInput): UpdateCartItemsOutput @resolver(class: "Magento\\QuoteGraphQl\\Model\\Resolver\\UpdateCartItems")
    removeItemFromCart(input: RemoveItemFromCartInput): RemoveItemFromCartOutput @resolver(class: "Magento\\QuoteGraphQl\\Model\\Resolver\\RemoveItemFromCart")
}

input createEmptyCartInput {
    cart_id: String
}

input AddSimpleProductsToCartInput {
    cart_id: String!
    cart_items: [SimpleProductCartItemInput!]!
}

input SimpleProductCartItemInput {
    data: CartItemInput!
    customizable_options:[CustomizableOptionInput!]
}

input AddVirtualProductsToCartInput {
    cart_id: String!
    cart_items: [VirtualProductCartItemInput!]!
}

input VirtualProductCartItemInput {
    data: CartItemInput!
    customizable_options:[CustomizableOptionInput!]
}

input CartItemInput {
    sku: String!
    quantity: Float!
}

input CustomizableOptionInput {
    id: Int!
    value_string: String!
}


input UpdateCartItemsInput {
    cart_id: String!
    cart_items: [CartItemUpdateInput!]!
}

input CartItemUpdateInput {
    cart_item_id: Int!
    quantity: Float!
}

input RemoveItemFromCartInput {
    cart_id: String!
    cart_item_id: Int!
}

type CartPrices {
    grand_total: Money
    subtotal_including_tax: Money
    subtotal_excluding_tax: Money
    subtotal_with_discount_excluding_tax: Money
    applied_taxes: [CartTaxItem]
}

type CartTaxItem {
    amount: Money!
    label: String!
}

type Cart {
    items: [CartItemInterface] @resolver(class: "\\Magento\\QuoteGraphQl\\Model\\Resolver\\CartItems")
    email: String @resolver (class: "\\Magento\\QuoteGraphQl\\Model\\Resolver\\CartEmail")
    prices: CartPrices @resolver(class: "\\Magento\\QuoteGraphQl\\Model\\Resolver\\CartPrices")
}

type CartItemQuantity {
    cart_item_id: Int!
    quantity: Float!
}

type AppliedCoupon {
    code: String!
}

input RemoveCouponFromCartInput {
    cart_id: String!
}

type RemoveCouponFromCartOutput {
    cart: Cart
}

type AddSimpleProductsToCartOutput {
    cart: Cart!
}

type AddVirtualProductsToCartOutput {
    cart: Cart!
}

type UpdateCartItemsOutput {
    cart: Cart!
}

type RemoveItemFromCartOutput {
    cart: Cart!
}

type SimpleCartItem implements CartItemInterface @doc(description: "Simple Cart Item") {
    customizable_options: [SelectedCustomizableOption] @resolver(class: "Magento\\QuoteGraphQl\\Model\\Resolver\\CustomizableOptions")
}

type VirtualCartItem implements CartItemInterface @doc(description: "Virtual Cart Item") {
    customizable_options: [SelectedCustomizableOption] @resolver(class: "Magento\\QuoteGraphQl\\Model\\Resolver\\CustomizableOptions")
}

interface CartItemInterface @typeResolver(class: "Magento\\QuoteGraphQl\\Model\\Resolver\\CartItemTypeResolver") {
    id: String!
    quantity: Float!
    product: ProductInterface!
}

type SelectedCustomizableOption {
    id: Int!
    label: String!
    is_required: Boolean!
    values: [SelectedCustomizableOptionValue!]!
    sort_order: Int!
}

type SelectedCustomizableOptionValue {
    id: Int!
    label: String!
    value: String
    price: CartItemSelectedOptionValuePrice!
}

type CartItemSelectedOptionValuePrice {
    value: Float!
    units: String!
    type: PriceTypeEnum!
}
